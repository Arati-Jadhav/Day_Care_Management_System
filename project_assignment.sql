-------------------------------------JOIN AND VIEW------------------------------------
--USING VIEW
---STUDENT ABSENTY AND PRESENT MONTHLY REPORT VIEW
CREATE OR REPLACE VIEW PRESENTY_DETAILS
AS
SELECT CD.CHILD_ID,A.CHILD_STATUS,COUNT(*)AS CNT
FROM CHILD_DETAIL CD JOIN ATTENDANCE A
ON (CD.CHILD_ID = A.C_ID)
--AND CD.CHILD_ID = 'T5'
GROUP BY CD.CHILD_ID,A.CHILD_STATUS;

SELECT * FROM PRESENTY_DETAILS
ORDER BY 1;

----------------------------------------------------------------------------------
--WHICH BABYSITTER/Teacher TAKING CARE OF HOW MANY CHILD
CREATE OR REPLACE VIEW TEACHER_CHILD`
AS
SELECT T.TEACHER_ID,C.CLASS_ID,CD.CHILD_ID
FROM TEACHER T JOIN CLASS C
ON(T.TEACHER_ID = C.TEACH_ID)
JOIN CHILD_DETAIL CD
ON(C.CLASS_ID = CD.CLS_ID)
GROUP BY T.TEACHER_ID,C.CLASS_ID,CD.CHILD_ID;

SELECT * FROM TEACHER_CHILD;
--ALTER TABLE CHILD_DETAIL_BKP RENAME COLUMN DATE_OF_BIRTH TO DOB;
---------------------------------------------------------------------------------------
--USING JOIN AND VIEW
--CLASS WISE ATTENDANCE OF CHILD
CREATE OR REPLACE VIEW CLASS_WISE_ATTENDANCE
AS
SELECT CD.FIRST_NAME,A.ATTENDANCE_DATE,C.CLASS_NAME,CD.CHILD_ID
FROM TEACHER T JOIN CLASS C
ON(T.TEACHER_ID = C.teach_id)
JOIN CHILD_DETAIL CD
ON(C.CLASS_ID = CD.CLS_ID)
JOIN ATTENDANCE A
ON (CD.CHILD_ID = A.C_ID)
--AND A.C_ID = 'T2'
GROUP BY CD.FIRST_NAME,A.ATTENDANCE_DATE,C.CLASS_NAME,CD.CHILD_ID
ORDER BY CD.FIRST_NAME,A.ATTENDANCE_DATE,C.CLASS_NAME,CD.CHILD_ID;

SELECT * FROM CLASS_WISE_ATTENDANCE;
-------------------------------------------------------------------------------------------------
---teacher attendance_view
CREATE OR REPLACE VIEW TECHER_ATTENDANCE
AS
SELECT ATTENDANCE_DATE,TEACHER_STATUS,TEACHER_ID,COUNT(*) AS CNT
FROM ATTENDANCE 
GROUP BY ATTENDANCE_DATE,TEACHER_STATUS,TEACHER_ID
--HAVING COUNT(*)>=1
ORDER BY 1;

SELECT * FROM TECHER_ATTENDANCE;

--------------------------------------------------------------------------------------
---datewise WHICH CHILD IS ABSENT 
SELECT CHILD_STATUS, TEACHER_ID,TEACHER_STATUS,COUNT(*)
FROM ATTENDANCE
WHERE CHILD_STATUS = 'A'
GROUP BY CHILD_STATUS,TEACHER_ID,TEACHER_STATUS
HAVING COUNT(*)>1
ORDER BY 1;

SELECT ATTENDANCE_DATE,TEACHER_ID,TEACHER_STATUS,COUNT(*)
FROM ATTENDANCE
--WHERE CHILD_STATUS = 'A'
GROUP BY ATTENDANCE_DATE,TEACHER_ID,TEACHER_STATUS
HAVING COUNT(*)>1
ORDER BY 1;

----------------------------------------------------------------------------------------
--USING JOIN 
--TEACHER ATTENDANCE 
SELECT T.TEACHER_ID,A.teacher_status,C.CLASS_ID,COUNT(*)
FROM TEACHER T JOIN CLASS C
ON(T.TEACHER_ID = C.teach_id)
JOIN CHILD_DETAIL CD
ON(C.CLASS_ID = CD.CLS_ID)
JOIN ATTENDANCE A
ON (CD.CHILD_ID = A.C_ID)
AND T.TEACHER_ID = 504
GROUP BY T.TEACHER_ID,A.teacher_status,C.CLASS_ID;

---------------------------------------------------------------------------------------
---USING JOIN
---CLASS WISE FEE OF EACH CHILD
SELECT C.CLASS_ID,CD.CHILD_ID,CD.FIRST_NAME,AMOUNT
FROM CLASS C JOIN CHILD_DETAIL CD
ON(CD.CLS_ID = C.CLASS_ID)
JOIN PAYMENT P
ON(CD.CHILD_ID = P.C_ID)
--AND CHILD_ID = 'T3'
GROUP BY C.CLASS_ID,CD.CHILD_ID,CD.FIRST_NAME,AMOUNT 
ORDER BY C.CLASS_ID,CD.CHILD_ID,CD.FIRST_NAME,AMOUNT;

-------------------------------------------------------------------------------------------
--USING JOIN 
--CLASS WISE GENDER COUNT
SELECT CLASS_ID,CD.GENDER,COUNT(*)
FROM CLASS C JOIN CHILD_DETAIL CD
ON(CD.CLS_ID = C.CLASS_ID)
GROUP BY CLASS_ID,CD.GENDER;
------------------------------------------------------------------------
--USING JOIN
---CHILD_WISE PARENT DETILS
SELECT CD.CHILD_ID,FIRST_NAME ,P.FATHER_NAME,LAST_NAME,MOTHER_NAME
FROM CHILD_DETAIL CD JOIN PARENT_DETAILS P
ON(CD.PAR_ID = P.PARENT_ID);
-------------------------------------------------------------------------------------------


----------------------------------------------------------------------------
--WHICH TEACHER TEACH WHICH CLASS
SELECT C.CLASS_ID,C.CLASS_NAME,C.TEACH_ID,T.FIRST_NAME,T.LAST_NAME
FROM CLASS C JOIN TEACHER T    
ON(T.TEACHER_ID = C.TEACH_ID);
  
--------------------------------------------------------------------------
--VIEW OF CHILD_INFO
CREATE OR REPLACE VIEW CHILD_INFO
AS 
SELECT * FROM CHILD_DETAIL;
------------------------------------------------------------------------------------------
---PARENT THET HAVING MORE THAN 1 CHILD
SELECT FATHER_NAME,MOTHER_NAME,COUNT(*)
FROM PARENT_DETAILS P JOIN CHILD_DETAIL CD
ON(CD.PAR_ID = P.PARENT_ID)
GROUP BY FATHER_NAME,MOTHER_NAME
HAVING COUNT(*)>1;

-----------------------ANALYATICAL_FUN---------------------------------------------

--ELDEST CHILD OF THE DAYCARE
SELECT * 
FROM 
(SELECT FIRST_NAME,ROUND(MONTHS_BETWEEN(SYSDATE,DOB)/12)AS AGE,
DENSE_RANK()OVER( ORDER BY ROUND(MONTHS_BETWEEN(SYSDATE,DOB)/12) DESC)AS RNK
FROM CHILD_DETAIL)TEMP 
WHERE TEMP.RNK=1;

--YOUNGEST CHILD OF DAYCARE
SELECT * 
FROM 
(SELECT FIRST_NAME,ROUND(MONTHS_BETWEEN(SYSDATE,DOB)/12)AS AGE,
DENSE_RANK()OVER( ORDER BY ROUND(MONTHS_BETWEEN(SYSDATE,DOB)/12) )AS RNK
FROM CHILD_DETAIL)TEMP 
WHERE TEMP.RNK<=1;

--TOP SALARY OF TEACHER
SELECT * 
FROM 
(SELECT FIRST_NAME,LAST_NAME,SALARY,
DENSE_RANK()OVER( ORDER BY SALARY DESC)AS RNK
FROM TEACHER)TEMP 
WHERE TEMP.RNK<=1;

--BOTTOM SALARY OF TEACHER
SELECT * 
FROM 
(SELECT FIRST_NAME,LAST_NAME,SALARY,
DENSE_RANK()OVER( ORDER BY SALARY )AS RNK
FROM TEACHER)TEMP 
WHERE TEMP.RNK<=1;

--LAG
SELECT ATTENDANCE_DATE,C_ID,CHILD_STATUS,
LAG(CHILD_STATUS,1,NULL) OVER(PARTITION BY ATTENDANCE_DATE ORDER BY C_ID)AS LAG
FROM ATTENDANCE;

--GENDER WISE COUNT OF STUDENT
SELECT FIRST_NAME,GENDER,
COUNT(*) OVER(PARTITION BY CHILD_ID )AS RNK
FROM CHILD_DETAIL
ORDER BY CHILD_ID;

--AVG SALARY OF TEACHER BY USING ANALYTICAL FUNCTION
SELECT FIRST_NAME,LAST_NAME,SALARY,
ROUND(AVG(SALARY)OVER(ORDER BY SALARY DESC))AS RNK
FROM TEACHER;
-----------------------------------INDEX---------------------------------------------------------
--ATTENDANCE_INDEX
CREATE INDEX ATTENDANCE_IND
ON ATTENDANCE(CHILD_STATUS,TEACHER_STATUS);
--DROP INDEX ATTENDANCE_IND;

--CHILD_DETAIL_INDEX
CREATE INDEX CHILD_INFO
ON CHILD_DETAIL(CLS_ID,DOB,GENDER);
--DROP INDEX CHILD_INFO;

--CLASS_INDEX
CREATE INDEX CLASS_IND
ON CLASS(START_AGE,END_AGE);
---------------------------------------SUBQUERY------------------------------------------------

--DETAIL OF CHILD WHOES MOTHER NAME IS MONIKA
--1
SELECT CHILD_ID,CLS_ID,FIRST_NAME,LAST_NAME,DOB
FROM CHILD_DETAIL
WHERE PAR_ID = (SELECT PARENT_ID
                FROM PARENT_DETAILS
                WHERE MOTHER_NAME = 'Monika');
--AGV_SALARY OF ALL TEACHERS THAT IS GREATER THAN TOTAL SALARY
--2
SELECT FIRST_NAME,LAST_NAME,SALARY
FROM TEACHER
WHERE SALARY >(SELECT AVG(SALARY)
                FROM TEACHER);
                
--3
-- INFORMATION OF CHILD WHO LEARN THE CLASS C1 AND C2 
SELECT CHILD_ID,FIRST_NAME,LAST_NAME,GENDER
FROM CHILD_DETAIL
WHERE CLS_ID IN (SELECT CLS_ID
                FROM CHILD_DETAIL
                WHERE CLS_ID IN ('C1','C2'));
                
--4
-- CHILD_DETAIL OF CHILD THAT IS PRESENT BETWEEN GIVEN DATE AND ABSENT AS WELL 
SELECT CHILD_ID ,CLS_ID,FIRST_NAME,LAST_NAME
FROM CHILD_DETAIL
WHERE CHILD_ID =ANY (SELECT C_ID
                    FROM ATTENDANCE
                    WHERE ATTENDANCE_DATE BETWEEN '27-09-22' AND '30-09-22'
                    AND CHILD_STATUS = 'A');
--5  
--DISPLAY THOSE CHILD WHO ARE IN CLASS C3
SELECT CHILD_ID,CLS_ID,FIRST_NAME,LAST_NAME
FROM CHILD_DETAIL
WHERE CLS_ID = ANY (SELECT CLASS_ID 
                    FROM CLASS
                    WHERE CLASS_ID = 'C3');
--UPDATE CHILD_DETAIL
--SET CHILD_ID = 'P6'
--WHERE CHILD_ID = 'I6';
--COMMIT;

--6 
--DISPLAY TECHER THAT DONT ASSIGN CLASS 
SELECT TEACHER_ID,FIRST_NAME,LAST_NAME,SALARY
FROM TEACHER
WHERE TEACHER_ID = (SELECT TEACH_ID
                    FROM CLASS 
                    WHERE CLASS_NAME IS NULL);

--7
--DISPLAY CHILD DETAIL THOSE CHILD THAT LEARN FROM TEACHER ID 502
SELECT CHILD_ID,FIRST_NAME,LAST_NAME,GENDER
FROM CHILD_DETAIL
WHERE CLS_ID IN (SELECT CLASS_ID
                FROM CLASS
                WHERE TEACH_ID IN (SELECT TEACHER_ID
                                    FROM TEACHER
                                    WHERE TEACHER_ID =502));
--------------------------------------------------------------------------------------
--WITH CLUSE
--
WITH TEMP 
AS 
(SELECT TEACHER_ID ,AVG(SALARY) AS SAL
FROM TEACHER 
GROUP BY TEACHER_ID
)
SELECT FIRST_NAME,LAST_NAME
FROM TEACHER T JOIN TEMP TE
ON(T.TEACHER_ID = TE.TEACHER_ID)
WHERE SALARY > TE.SAL;

------------------------------------------------------------------------------------------------
--FUNCTION AND PROCEDURE OF ATOMATICALLY UPDATED THE DUE AMOUNT OF PAYMENT TABLE
--FUNCTION
SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION DUE_AMT_FUN(PAID_AMOUNT IN NUMBER,AMOUNT IN NUMBER)
RETURN NUMBER
IS
DUE NUMBER;
BEGIN
     DUE := AMOUNT - PAID_AMOUNT;
--     IF DUE = 0 
--     THEN 
--        RETURN DUE;
--     ELSE 
--        RETURN DUE;
--     END IF;
END;
    
SELECT DUE_AMT_FUN(5000,20000)
FROM DUAL;
--------------------------------------------------------------------------------------------
--PROCEDURE
CREATE OR REPLACE PROCEDURE INSERT_PROC(PAYID VARCHAR2,AMT NUMBER,PAMT NUMBER,PDATE DATE,
CHID VARCHAR2)
IS
    NO_INSERTION EXCEPTION;
BEGIN
    INSERT INTO PAYMENT(PAY_ID,AMOUNT,PAID_AMOUNT,DUE_AMOUNT,PAID_DATE,C_ID)VALUES
    (PAYID,AMT,PAMT,DUE_AMT_FUN(PAMT,AMT),PDATE,CHID);
    IF SQL%NOTFOUND
    THEN
    RAISE NO_INSERTION;
    END IF;
    COMMIT;
EXCEPTION 
    WHEN NO_INSERTION
    THEN
    DBMS_OUTPUT.PUT_LINE('DATA NOT INSERTED');
END;
EXECUTE INSERT_PROC('P' || PAYMENT_SEQ.NEXTVAL,15000,10000,'06-09-22','T3');
------------------------------------------------------------------------------------------
--TAKE DATE OF BIRTH ASSIGN THE CLASS TO CHILD AND INSERT THE ROW INTO THE CHILD DETAIL TABLE
--USING FUNCTION AND PROCEDURE
--FUNCTION
CREATE OR REPLACE FUNCTION FIND_MONTHS( DOB IN DATE)
RETURN VARCHAR2
IS
MONTH_AGE NUMBER;

BEGIN 
    MONTH_AGE := ROUND(MONTHS_BETWEEN(SYSDATE,DOB),0);
    IF MONTH_AGE BETWEEN 6 AND 12
    THEN 
    RETURN 'C1';
    ELSIF MONTH_AGE BETWEEN 13 AND 24
    THEN 
    RETURN 'C2';
    ELSIF MONTH_AGE BETWEEN 25 AND 48
    THEN 
    RETURN 'C3';
    END IF;
END;

SELECT FIND_MONTHS('12-09-2020')
FROM DUAL;
----------------------------------------------------------------------------------
--PROCRDURE
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE INSERT_PROC(CHID IN VARCHAR2,FNAME IN VARCHAR2,
LNAME IN VARCHAR2,GEN IN VARCHAR2,DT IN DATE,PARID IN VARCHAR2)
IS
    NOT_INSERTION EXCEPTION;
BEGIN
    INSERT INTO CHILD_DETAIL(CHILD_ID,CLS_ID,FIRST_NAME,LAST_NAME,GENDER,DOB,PAR_ID)
    VALUES(CHID,FIND_MONTHS(DT),FNAME,LNAME,GEN,DT,PARID);
    IF SQL%NOTFOUND
    THEN 
    RAISE NOT_INSERTION;
    END IF;
    COMMIT;
EXCEPTION
    WHEN NOT_INSERTION
    THEN 
    DBMS_OUTPUT.PUT_LINE('INSERT VALID DATA');
END;

EXECUTE INSERT_PROC('T6','Aditya','Gavdhe','M','26-09-20',117);
SELECT * FROM CHILD_DETAIL; 


----------------------------------------------------------------------------------------------
--ASSIGN CLASS TEACHER UDING FUNCTION
CREATE OR REPLACE FUNCTION ASSIGN_TEACHER(DOB IN DATE)
RETURN NUMBER
IS
AGE NUMBER;

BEGIN
    AGE := ROUND(MONTHS_BETWEEN(SYSDATE,DOB));
    IF AGE BETWEEN 6 AND 12
    THEN RETURN 501;
    ELSIF AGE BETWEEN 13 AND 24
    THEN RETURN 502;
    ELSIF AGE BETWEEN 25 AND 48
    THEN RETURN 503;
    ELSE RETURN 504;
    END IF;
END ;

SELECT ASSIGN_TEACHER('12-09-21')
FROM DUAL;
-----------------------------------------------------------------
--ASSIGN DATE OF BIRTH WESE FEE TO CHILD AND CHECK EXCEPTION WHEN DOB IS NOT VALID
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE ASSIGN_CHILD_FEE(DOB IN DATE)
IS
AGE NUMBER;
INVALID_DOB EXCEPTION;

BEGIN
    AGE := ROUND(MONTHS_BETWEEN(SYSDATE,DOB));
    IF AGE BETWEEN 6 AND 12
    THEN 
    DBMS_OUTPUT.PUT_LINE('ELIGIBLE FOR INFANT CLASS AND FEE IS:'||1500);
    ELSIF AGE BETWEEN 13 AND 24
    THEN 
    DBMS_OUTPUT.PUT_LINE('ELIGIBLE FOR TODDLER CLASS AND FEE IS:'||20000);
    ELSIF AGE BETWEEN 25 AND 48
    THEN 
    DBMS_OUTPUT.PUT_LINE('ELIGIBLE FOR PRESCHOOLERS CLASS AND FEE IS:'||25000);
    ELSIF AGE > 48 OR AGE < 6 
    THEN
    RAISE INVALID_DOB;
    END IF;
EXCEPTION 
    WHEN INVALID_DOB
    THEN 
    DBMS_OUTPUT.PUT_LINE('INVALID DATE OF BIRTH NOT VALID FOR ADDMISSION');
END ;

EXECUTE ASSIGN_CHILD_FEE('12-02-21');
----------------------------------------------------------------------------------------------
--USING MERGE
--CHILD_DETAIL_BACKUP_TABLE
CREATE TABLE CHILD_DETAIL_BKP
AS
SELECT * FROM CHILD_DETAIL;

--UPDATE CHILD_DETAIL_BKP TABLE USING CHILD_DETAIL
MERGE INTO CHILD_DETAIL_BKP BK
USING CHILD_DETAIL CD
ON(BK.CHILD_ID = CD.CHILD_ID)
WHEN MATCHED THEN UPDATE
SET BK.CLS_ID = CD.CLS_ID,
    BK.FIRST_NAME = CD.FIRST_NAME,
    BK.LAST_NAME = CD.LAST_NAME,
    BK.GENDER = CD.GENDER,
    BK.DOB = CD.DOB,
    BK.PAR_ID = CD.PAR_ID
WHEN NOT MATCHED THEN INSERT
VALUES(CD.CHILD_ID,CD.CLS_ID,CD.FIRST_NAME,CD.LAST_NAME,CD.GENDER,CD.DOB,CD.PAR_ID);

--INSERT INTO CHILD_DETAIL VALUES ('I6','C3','Prasad','Jagtap','M','28-09-2021',111);

--UPDATE CHILD_DETAIL
--SET LAST_NAME = 'Jagtap'
--WHERE FIRST_NAME = 'Sachin';

--SELECT * FROM CHILD_DETAIL;
--SELECT * FROM PARENT_DETAILS;
--SELECT * FROM CHILD_DETAIL_BKP;
COMMIT;
----------------------------------------------------------------------------------------------
--4.
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE ATTENDANCE_PROC(D1 DATE,D2 DATE)
AS
CURSOR ATT_CUR
    IS
    SELECT CD.FIRST_NAME,CD.LAST_NAME,CD.DOB,A.CHILD_STATUS
    FROM CHILD_DETAIL CD JOIN ATTENDANCE A
    ON(CD.CHILD_ID=A.C_ID)
    WHERE ATTENDANCE_DATE BETWEEN D1 AND D2;
    
BEGIN
    
    FOR REC_ATT IN ATT_CUR
    LOOP
    DBMS_OUTPUT.PUT_LINE(REC_ATT.FIRST_NAME||CHR(9)||REC_ATT.LAST_NAME||
    CHR(9)||REC_ATT.DOB||CHR(9) || REC_ATT.CHILD_STATUS);
    END LOOP;
--EXCEPTION
--    WHEN
--    NO_DATA_FOUND
--    THEN 
--    DBMS_OUTPUT.PUT_LINE('PLZ ENTER COREECT INPUT');      
END;

EXECUTE ATTENDANCE_PROC('27-09-22','01-10-22');


-------------------------------------------------------
5.
--CLSAA ASSIGN USING PROCEDURE

SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE PROC_01
IS

TYPE REC_CH IS RECORD
(FNAME CHILD_DETAIL.FIRST_NAME%TYPE,
DOB DATE,
AGE NUMBER);
CHILD_V REC_CH;

CURSOR CUR_CHILD IS
SELECT FIRST_NAME,DOB,MONTHS_BETWEEN(SYSDATE,DOB)AS AGE
FROM CHILD_DETAIL;

BEGIN  
      OPEN CUR_CHILD;
      LOOP
      FETCH CUR_CHILD INTO CHILD_V;
      EXIT WHEN CUR_CHILD%NOTFOUND;
         IF
         CHILD_V.AGE BETWEEN 06 AND 12
         THEN 
         DBMS_OUTPUT.PUT_LINE(CHILD_V.FNAME || CHR(9)||'IS IN Infants CLASS');
         ELSIF
         CHILD_V.AGE BETWEEN 13 AND 24
         THEN 
         DBMS_OUTPUT.PUT_LINE(CHILD_V.FNAME || CHR(9)||'IS IN Toddlers CLASS');
         ELSIF
         CHILD_V.AGE BETWEEN 25 AND 48
         THEN 
         DBMS_OUTPUT.PUT_LINE(CHILD_V.FNAME || CHR(9)||'IS IN Preschoolers CLASS'); 
         END IF;
         END LOOP;
         CLOSE CUR_CHILD;
 END;
         
EXECUTE PROC_01;

--------------------------------------------------------------------
6.
---INCCREASE THE SALARY OF TEACHER GIVEING 1000RS
SET SERVEROUTPUT ON

CREATE OR REPLACE PROCEDURE PRO_01
IS

CURSOR CUR_01 IS
SELECT FIRST_NAME,LAST_NAME,SALARY,(SALARY+1000)AS TOTAL_SAL
FROM TEACHER;

FNAME TEACHER.FIRST_NAME%TYPE;
LNAME TEACHER.LAST_NAME%TYPE;
SAL TEACHER.SALARY%TYPE;
TOTAL_SAL NUMBER;

BEGIN
    OPEN CUR_01;
    LOOP
    FETCH CUR_01 INTO FNAME,LNAME,SAL,TOTAL_SAL;
    EXIT WHEN CUR_01%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(FNAME||' '||LNAME||' '||SAL||' '||ROUND(TOTAL_SAL+TOTAL_SAL*0.1));
    END LOOP;
    CLOSE CUR_01;
END;
    

EXECUTE PRO_01;


-----------------------------------------------------------------------------------------------

7.
--TEACHER INFORMATION USING PROCEDURE

SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE PRO_01 (CID NUMBER)IS

FNAME TEACHER.FIRST_NAME%TYPE;
LNAME TEACHER.LAST_NAME%TYPE;

BEGIN
    SELECT FIRST_NAME,LAST_NAME INTO FNAME, LNAME
    FROM TEACHER
    WHERE TEACHER_ID=CID;
    DBMS_OUTPUT.PUT_LINE(FNAME||' '||LNAME);
 EXCEPTION
      WHEN
      NO_DATA_FOUND
      THEN
      DBMS_OUTPUT.PUT_LINE('INCORRECT INPUT');
 
END;     
        
EXECUTE PRO_01(&CID);       

--------------------------------------------------------------------------------------
8.

SET SERVEROUTPUT ON

CREATE OR REPLACE PROCEDURE CHILD_PRO (CID VARCHAR2)
IS

REC_CH1 CHILD_DETAIL%ROWTYPE;
INVALID_INPUT EXCEPTION;

CURSOR CUR_01 IS
SELECT * 
FROM CHILD_DETAIL 
WHERE CHILD_ID = CID;

BEGIN
     OPEN CUR_01;
     LOOP
     FETCH CUR_01 INTO REC_CH1;
     EXIT WHEN CUR_01%NOTFOUND;
     DBMS_OUTPUT.PUT_LINE(REC_CH1.FIRST_NAME||' '||REC_CH1.LAST_NAME);
     END LOOP;
     CLOSE CUR_01;
--EXCEPTION 
--    WHEN INVALID_INPUT
--    THEN
--    DBMS_OUTPUT.PUT_LINE('ENTER THE VALID INPUT');
END;     
     
EXECUTE CHILD_PRO ('&CID') ;  

--------------------------------------------------------------------------------------
--ABSENTY OF PERTICULAR CHILD USING FUNCTIN AND PROCEDURE
--FUNCTION TO COUNT THE ABSENTY OF CHILD
CREATE OR REPLACE FUNCTION ABSENTY_REPORT(CID IN VARCHAR2)
RETURN NUMBER
IS
CNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO CNT
    FROM ATTENDANCE 
    WHERE C_ID = CID AND CHILD_STATUS = 'A';
    RETURN CNT;
END;
SELECT ABSENTY_REPORT('&CID')
FROM DUAL;
---------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
--FUNCTION TO COUNT THE PRESENTY OF CHIL
CREATE OR REPLACE FUNCTION PRESENTY_REPORT(CID IN VARCHAR2)
RETURN NUMBER
IS
CNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO CNT
    FROM ATTENDANCE 
    WHERE C_ID = CID AND CHILD_STATUS = 'P';
    RETURN CNT;
END;
SELECT PRESENTY_REPORT('&CID')
FROM DUAL;
----------------------------------------------------------------------------------------
--PROCEDURE USING ABOVE TWO FUNCTION AND FINE DETAIL OF CHILD WITH THEIR ABSENTY AND PRESENTY
CREATE OR REPLACE PROCEDURE PRESENTY_ABSENTY_REPORT_PROC(CID IN VARCHAR2)
IS
--NO_DATA_FOUND EXCEPTION;
FNAME CHILD_DETAIL.FIRST_NAME%TYPE;
LNAME CHILD_DETAIL.LAST_NAME%TYPE;
CHID CHILD_DETAIL.CHILD_ID%TYPE;

BEGIN
    SELECT CHILD_ID,FIRST_NAME,LAST_NAME
    INTO CHID,FNAME,LNAME
    FROM CHILD_DETAIL
    WHERE CHILD_ID = CID;
    DBMS_OUTPUT.PUT_LINE(CHID||' '||FNAME||' '||LNAME||' '||'IS PRESENT FOR '||
    PRESENTY_REPORT(CID)||' '||'DAYS OF MONTH');
    DBMS_OUTPUT.PUT_LINE(CHID||' '||FNAME||' '||LNAME||' '||'IS ABSENT FOR '||
    ABSENTY_REPORT(CID)||' '||'DAYS OF MONTH');
    
EXCEPTION 
    WHEN NO_DATA_FOUND
    THEN
    DBMS_OUTPUT.PUT_LINE('GIVE CORRECT INPUT');
END;


EXECUTE PRESENTY_ABSENTY_REPORT_PROC('&CID');

-------------------------------------------------------------------------------------------
--PROCEDURE FOR HOW MANY CHLID IN SINGLE CLASS BUT HERE WE NOT USING CURSOR THATS WHY WE RAISE 
--EXCEPTION AS TOO_MANY_ROWS
CREATE OR REPLACE PROCEDURE CHILD_CLASS_PROC(CID IN VARCHAR2)
IS
--NO_DATA_FOUND EXCEPTION;
ATT ATTENDANCE.ATTENDANCE_DATE%TYPE;
FNAME CHILD_DETAIL.FIRST_NAME%TYPE;
LNAME CHILD_DETAIL.LAST_NAME%TYPE;
CHID CHILD_DETAIL.CHILD_ID%TYPE;
CLS CLASS.CLASS_NAME%TYPE;

BEGIN
    SELECT C.CHILD_ID,C.FIRST_NAME,C.LAST_NAME,A.ATTENDANCE_DATE,CL.CLASS_NAME
    INTO CHID,FNAME,LNAME,ATT,CLS
    FROM CLASS CL  JOIN CHILD_DETAIL C
    ON(CL.CLASS_ID=C.CLS_ID)
    JOIN ATTENDANCE A
    ON(A.C_ID=C.CHILD_ID)
    WHERE CLASS_ID = CID;
    DBMS_OUTPUT.PUT_LINE(CHID||' '||FNAME||' '||LNAME||' '||ATT||' '||CLS);
    
EXCEPTION 
    WHEN NO_DATA_FOUND
    THEN
    DBMS_OUTPUT.PUT_LINE('GIVE CORRECT INPUT');
    WHEN
    TOO_MANY_ROWS
    THEN
    DBMS_OUTPUT.PUT_LINE('CANT FETCH MULTIPLE VALUES');
END;


EXECUTE CHILD_CLASS_PROC('&CID');
-------------------------------------------------------------------------------------
--USING EXCEPTION INVALID CURSOR
--CURSOR FOR FETCH MULTIPLE CHILD IN SINGLE CLASS IN 

CREATE OR REPLACE PROCEDURE CHILD_CLASS_PROC1(CID IN VARCHAR2)
IS
    FNAME CHILD_DETAIL.FIRST_NAME%TYPE;
    LNAME CHILD_DETAIL.LAST_NAME%TYPE;
    CHID CHILD_DETAIL.CHILD_ID%TYPE;
    CLS CLASS.CLASS_NAME%TYPE;

    CURSOR CLS_CUR
    IS
    SELECT C.CHILD_ID,C.FIRST_NAME,C.LAST_NAME,CL.CLASS_NAME
    FROM CLASS CL  JOIN CHILD_DETAIL C
    ON(CL.CLASS_ID=C.CLS_ID)
    WHERE CLASS_ID = CID;

BEGIN
    --OPEN CLS_CUR;
    LOOP
    FETCH CLS_CUR INTO CHID,FNAME,LNAME,CLS;
    EXIT WHEN CLS_CUR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(CHID||' '||FNAME||' '||LNAME||' '||CLS);
    END LOOP;
    CLOSE CLS_CUR;

--EXCEPTION
--    WHEN NO_DATA_FOUND 
--    THEN 
--    DBMS_OUTPUT.PUT_LINE('ENTER THE CORRECT VALUE FOR DID');
EXCEPTION
    WHEN INVALID_CURSOR
    THEN 
    DBMS_OUTPUT.PUT_LINE('INVALID_CURSOR');
END;

EXECUTE CHILD_CLASS_PROC1('&CID');

------------------trigger using on tecaher table-------------------
select * from teacher;

create or replace trigger teacher_trigger
before insert on teacher
 
begin
       if (to_char(sysdate ,'Dy') in ('Sun')) or  
           (to_char(sysdate ,'hh24:MI')
       not between '8:00' and '18:00')
       then 
       RAISE_APPLICATION_ERROR (-20500, 'TODAY IS HOLIDAY PL COME TOMMROW');
       END IF;
END;
/               
                

insert into teacher(teacher_id,first_name, last_name,salary) 
            values(505, 'Priya', 'Jadhav',11500);
            
            
=========================================================================================    
-----------------Trigger on child table---------------------
 select * from child_detail;
 select * from child_histoy;
 
 create table child_Hi(child_id VARCHAR2(20), 
 old_child_id VARCHAR2(20) , 
 first_name varchar2(20),
 old_first_name varchar2(20),
 last_name varchar2(20),
 old_last_name varchar(20));
 
drop table child_histoy;
 
create or replace trigger child_trig
after insert or delete or update on child_detail
for each row
begin
insert into child_hi(child_id,old_child_id,first_name, old_first_name,
last_name, old_last_name) values
(:new.child_id,:old.child_id,:new.first_name, :old.first_name, 
:new.last_name,:old.last_name);
end;
/
                                 
                                  
                                  
INSERT  INTO child_detail VALUES('P7','C1','Amol','Patil','M','10-OCT-21',116);
SELECT * FROM CHILD_DETAIL; 
SELECT * FROM CHILD_HI; 

UPDATE CHILD_DETAIL 
SET FIRST_NAME='NILESH'
WHERE CHILD_ID='P6';

DELETE CHILD_DETAIL
WHERE CHILD_ID='P6';
                    


                
                


                
                
















